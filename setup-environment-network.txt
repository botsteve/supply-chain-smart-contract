#After installing all the preqs(see Test network documentation)
#Setup network
./network.sh up -ca
./network.sh up createChannel
./network.sh deployCC -ccn blockchain-contract -ccp ../../blockchain/blockchain-contract/ -ccl typescript

# Environment variables for Org1
export PATH=${PWD}/../bin:$PATH
export FABRIC_CFG_PATH=$PWD/../config/
export CORE_PEER_TLS_ENABLED=true
export CORE_PEER_LOCALMSPID="Org1MSP"
export CORE_PEER_TLS_ROOTCERT_FILE=${PWD}/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt
export CORE_PEER_MSPCONFIGPATH=${PWD}/organizations/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp
export CORE_PEER_ADDRESS=localhost:7051

#Initialise ledger
peer chaincode invoke -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com \
--tls --cafile ${PWD}/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem \
-C mychannel -n blockchain-contract --peerAddresses localhost:7051 \
--tlsRootCertFiles ${PWD}/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt --peerAddresses localhost:9051 \
--tlsRootCertFiles ${PWD}/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt -c '{"function":"initLedger","Args":[]}'
#Test Ledger
peer chaincode invoke -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --tls --cafile ${PWD}/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem -C mychannel -n blockchain-contract --peerAddresses localhost:7051 --tlsRootCertFiles ${PWD}/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt --peerAddresses localhost:9051 --tlsRootCertFiles ${PWD}/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt -c '{"function":"queryAllAssets","Args":["BOTTLE"]}'

#Run front-end server
1. docker run -d -p 80:80 botsteve/blockchain-client:v1.5
OR
configure nginx to serve static files locally

#Run back-end server 
1. docker run -d -p 5900:5900 botsteve/blockchain-client:v1.2
OR
1.Configure jdk in PATH
2.run: java -jar blockchain-server.jar after packaging the project(mvn clean install)
run compiled jar from exposition maven module0->target java -jar blockchain-server.jar

Problems encounterd :
1.Tsc permissioned denied
chmod a+x node_modules/.bin/tsc
2.Convert carriege return to unix CRLF->LF
find . -type f -print0 | xargs -0 dos2unix
3.Configure nodejs 14
https://github.com/nodesource/distributions/blob/master/README.md#deb
4.NoSuchHostException
add peer names in /etc/hosts
5.Different warn errors when creating channel
chmod +x -R . on fabric-samples
6.Minimum java version 52~java 8
export PATH=java-se-8u41-ri/bin:$PATH
7. kill locked process for port 
fuser -k 8080/tcp

To-Do-For-Cloud-migration:
1.Convert docker-compose files to k8s services using kompose

Known-problems:
SSL problems- possible solution to add certificates in jdk cacerts

#Test network documentation
https://hyperledger-fabric.readthedocs.io/en/release-2.2/deploy_chaincode.html#install-the-chaincode-package
https://hyperledger-fabric.readthedocs.io/en/release-2.3/test_network.html

#Github repo
https://github.com/botsteve/blockchain
#Docker-HUB
https://hub.docker.com/repository/docker/botsteve/blockchain-server
https://hub.docker.com/repository/docker/botsteve/blockchain-client


